"""
Interface for vulnerability scanners in the AI Code Translator.
"""

from typing import List, Dict, Any, Optional
from .vulnerability import Vulnerability

class VulnerabilityScannerInterface:
    """Interface for vulnerability scanners."""
    
    async def scan_code(self, code: str, language: str) -> List[Vulnerability]:
        """Scan code for vulnerabilities.
        
        Args:
            code: Code to scan
            language: Programming language
            
        Returns:
            List of detected vulnerabilities
        """
        raise NotImplementedError("This method must be implemented by subclasses")

    def get_patterns(self, language: str) -> List[Dict[str, Any]]:
        """Get patterns for a specific language.
        
        Args:
            language: Programming language
            
        Returns:
            List of patterns
        """
        raise NotImplementedError("This method must be implemented by subclasses")

    def add_pattern(self, language: str, pattern: Dict[str, Any]) -> bool:
        """Add a new pattern for a specific language.
        
        Args:
            language: Programming language
            pattern: Pattern configuration
            
        Returns:
            True if pattern was added, False otherwise
        """
        raise NotImplementedError("This method must be implemented by subclasses")

    def remove_pattern(self, language: str, pattern_id: str) -> bool:
        """Remove a pattern by ID.
        
        Args:
            language: Programming language
            pattern_id: Pattern ID
            
        Returns:
            True if pattern was removed, False otherwise
        """
        raise NotImplementedError("This method must be implemented by subclasses")

    def update_pattern(self, language: str, pattern_id: str, new_pattern: Dict[str, Any]) -> bool:
        """Update an existing pattern.
        
        Args:
            language: Programming language
            pattern_id: Pattern ID
            new_pattern: New pattern configuration
            
        Returns:
            True if pattern was updated, False otherwise
        """
        raise NotImplementedError("This method must be implemented by subclasses")
