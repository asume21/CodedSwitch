#!/usr/bin/env python3
"""
Beat Studio Demo Script
Test the Advanced Beat Studio features
"""

import tkinter as tk
import ttkbootstrap as ttk
import sys
import os

def demo_beat_studio():
    """Demo the Advanced Beat Studio independently."""
    
    print("üéµ CodedSwitch Advanced Beat Studio Demo")
    print("=" * 50)
    
    # Create demo window
    root = ttk.Window(themename="superhero")
    root.title("Beat Studio Demo")
    root.geometry("800x600")
    
    # Main frame
    main_frame = ttk.Frame(root)
    main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
    
    # Header
    header_label = ttk.Label(main_frame, text="üéµ Advanced Beat Studio Demo", 
                            font=('Arial', 18, 'bold'))
    header_label.pack(pady=(0, 20))
    
    # Demo info
    info_text = """
üöÄ PROFESSIONAL MUSIC PRODUCTION FEATURES:

‚ú® Multi-Track Sequencer
‚Ä¢ 8 professional tracks (Kick, Snare, Hi-hat, etc.)
‚Ä¢ 16-step pattern editor with visual feedback
‚Ä¢ Real-time beat editing with mouse clicks
‚Ä¢ BPM control (60-200) with swing adjustment

üéπ Piano Roll Melody Editor  
‚Ä¢ Full piano roll interface with note editing
‚Ä¢ Multiple melody tracks with different instruments
‚Ä¢ Music theory integration (7 scales, 12 keys)
‚Ä¢ ADSR envelopes for realistic sound

üéöÔ∏è Professional Mixer
‚Ä¢ Individual channel strips with EQ
‚Ä¢ Send effects (Reverb, Delay)
‚Ä¢ Mute/Solo controls per track
‚Ä¢ Master volume with professional range

ü§ñ AI Music Assistant
‚Ä¢ Intelligent beat generation in 8 styles
‚Ä¢ AI-powered melody composition
‚Ä¢ Custom prompt support for any musical idea
‚Ä¢ Music theory-aware suggestions

üîä Advanced Audio Engine
‚Ä¢ Real-time synthesis and playback
‚Ä¢ 44.1kHz/16-bit professional quality
‚Ä¢ Multi-channel mixing with effects
‚Ä¢ WAV export for external use

üìÅ Project Management
‚Ä¢ Save/Load projects as JSON
‚Ä¢ Export professional WAV files
‚Ä¢ Session management with auto-save
    """
    
    from ttkbootstrap.scrolled import ScrolledText
    info_display = ScrolledText(main_frame, wrap=tk.WORD, height=20, font=('Arial', 10))
    info_display.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
    info_display.insert("1.0", info_text)
    info_display.config(state='disabled')
    
    # Action buttons
    button_frame = ttk.Frame(main_frame)
    button_frame.pack(fill=tk.X)
    
    def launch_beat_studio():
        """Launch the actual Beat Studio."""
        try:
            # Import and launch Beat Studio
            sys.path.append(os.path.dirname(__file__))
            from advanced_beat_studio import AdvancedBeatStudio
            
            # Create a mock parent for demo
            class MockParent:
                def __init__(self):
                    self.ai_interface = None
            
            mock_parent = MockParent()
            studio = AdvancedBeatStudio(mock_parent, None)
            
            tk.messagebox.showinfo("Success!", "üéµ Beat Studio launched successfully!")
            
        except ImportError as e:
            tk.messagebox.showwarning("Dependencies", 
                f"Beat Studio requires additional dependencies:\n\n"
                f"pip install pygame numpy scipy\n\n"
                f"Error: {e}")
        except Exception as e:
            tk.messagebox.showerror("Error", f"Failed to launch Beat Studio: {e}")
    
    def show_installation():
        """Show installation instructions."""
        install_text = """
üîß INSTALLATION GUIDE:

1Ô∏è‚É£ Install Core Dependencies:
pip install pygame numpy scipy

2Ô∏è‚É£ Optional (Advanced Features):
pip install sounddevice soundfile

3Ô∏è‚É£ Add to CodedSwitch:
‚Ä¢ Copy advanced_beat_studio.py to your CodedSwitch directory
‚Ä¢ Update menu_handlers.py with the new version
‚Ä¢ Restart CodedSwitch

4Ô∏è‚É£ Launch:
‚Ä¢ Tools Menu ‚Üí "Beat Studio"
‚Ä¢ Professional interface opens
‚Ä¢ Start creating music!

üéØ WHAT WORKS:
‚úÖ Basic Mode: UI and controls (no dependencies)
‚úÖ Audio Mode: Full synthesis (pygame + numpy)  
‚úÖ Pro Mode: Effects and export (+ scipy)
‚úÖ Studio Mode: Recording features (+ sounddevice)

The Beat Studio gracefully handles missing dependencies!
        """
        
        install_window = tk.Toplevel(root)
        install_window.title("Installation Guide")
        install_window.geometry("600x500")
        
        install_display = ScrolledText(install_window, wrap=tk.WORD, font=('Arial', 10))
        install_display.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        install_display.insert("1.0", install_text)
        install_display.config(state='disabled')
    
    def test_features():
        """Test individual features."""
        features_text = """
üß™ FEATURE TESTING CHECKLIST:

ü•Å SEQUENCER TESTS:
‚ñ° Click pattern grid squares to add/remove beats
‚ñ° Adjust BPM slider (60-200 range)
‚ñ° Test swing control for groove
‚ñ° Try different pattern lengths (8/16/32/64)
‚ñ° Use track volume and pitch controls
‚ñ° Test mute/solo buttons

üéπ MELODY EDITOR TESTS:  
‚ñ° Click piano roll to add notes
‚ñ° Drag notes to change length
‚ñ° Right-click to delete notes
‚ñ° Switch between melody tracks
‚ñ° Change key and scale settings
‚ñ° Generate melodies with AI

üéöÔ∏è MIXER TESTS:
‚ñ° Adjust individual track volumes
‚ñ° Test EQ controls (High/Mid/Low)
‚ñ° Add reverb and delay sends
‚ñ° Use master volume fader
‚ñ° Test mute/solo on mixer

ü§ñ AI ASSISTANT TESTS:
‚ñ° Generate beats in different styles
‚ñ° Create melodies with AI
‚ñ° Try custom prompts
‚ñ° Apply AI suggestions to tracks

üîä PLAYBACK TESTS:
‚ñ° Play/pause/stop transport
‚ñ° Test loop functionality
‚ñ° Monitor playback position
‚ñ° Check audio quality

üíæ PROJECT TESTS:
‚ñ° Save project to JSON
‚ñ° Load existing project
‚ñ° Export to WAV format
‚ñ° Test file management

Ready to test? Click "Launch Beat Studio" above!
        """
        
        test_window = tk.Toplevel(root)
        test_window.title("Feature Testing")
        test_window.geometry("600x600")
        
        test_display = ScrolledText(test_window, wrap=tk.WORD, font=('Arial', 10))
        test_display.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        test_display.insert("1.0", features_text)
        test_display.config(state='disabled')
    
    # Buttons
    ttk.Button(button_frame, text="üöÄ Launch Beat Studio", 
              command=launch_beat_studio, bootstyle="success").pack(side=tk.LEFT, padx=5)
    
    ttk.Button(button_frame, text="üì¶ Installation Guide", 
              command=show_installation, bootstyle="info").pack(side=tk.LEFT, padx=5)
    
    ttk.Button(button_frame, text="üß™ Test Features", 
              command=test_features, bootstyle="primary").pack(side=tk.LEFT, padx=5)
    
    ttk.Button(button_frame, text="‚ùå Close Demo", 
              command=root.destroy, bootstyle="danger").pack(side=tk.RIGHT, padx=5)
    
    # Status
    status_label = ttk.Label(main_frame, text="üéµ Ready to explore professional music production!")
    status_label.pack(pady=10)
    
    root.mainloop()

if __name__ == "__main__":
    demo_beat_studio()